<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.wwz.bookSystem.mapper.UserMapper">

	<!-- 缓存配置 -->
	<cache type="org.mybatis.caches.ehcache.LoggingEhcache" >  
      <property name="timeToIdleSeconds" value="3600"/>
      <property name="timeToLiveSeconds" value="3600"/>
      <property name="maxEntriesLocalHeap" value="1000"/>  
      <property name="maxEntriesLocalDisk" value="10000000"/>  
      <property name="memoryStoreEvictionPolicy" value="LRU"/>  
  	</cache>

	<!-- 关联实体类 -->
	<resultMap type="User" id="userAndRoleMap">  
        <id property="id" column="id" />  
        <result property="username" column="username" />  
        <result property="password" column="password" />
        <result property="name" column="name" />  
        <result property="email" column="email" />  
        <result property="phone" column="phone" />
        <result property="regDate" column="regDate" />
        <collection property="roles" ofType="Role">  
            <id property="id" column="rid" />  
            <result property="identity" column="identity" />  
        </collection>  
    </resultMap>  
    
    <!-- 通过id查询用户和角色 -->
    <select id="selectUserById" parameterType="int" resultMap="userAndRoleMap">
    	select u.*,r.id rid,r.identity
		from user u 
		left join user_role ur on u.id=ur.user_id
		left join role r on ur.role_id=r.id
		where u.id=#{id}
    </select>

	<!-- 添加用户 -->
	<insert id="addUser" parameterType="User">
    		insert into user(username,password,name,email,phone,regDate) 
    		values(#{username},#{password},#{name},#{email},#{phone},#{regDate})	
    </insert>
    
    <!-- 删除用户 -->
    <delete id="deleteUser" parameterType="int">
    	delete from user
    	where id=#{id}
    </delete>
    
    <!-- 通过用户账号验证登录 -->
    <select id="selectByUsername" parameterType="String" resultType="User">
    	select * from user
    	where username=#{username}
    </select>
    
    <!-- 通过username和password验证用户是否存在 -->
    <select id="selectByUsernameAndPassword" parameterType="String" resultType="User">
    	select * from user
    	where username=#{username} and password=#{password}
    </select>
    
    <!-- 修改用户基本信息 -->
    <update id="modifyUser" parameterType="User">
    	update user set name=#{name},email=#{email},phone=#{phone}
    	where id=#{id}
    </update>
    
    <!-- 修改用户密码 -->
    <update id="modifyPassword" parameterType="User">
    	update user set password=#{password}
    	where id=#{id}
    </update>
    
    <!-- 通过角色ID查询用户集合 -->
    <select id="selectUserByRoleId" parameterType="int" resultType="User" useCache="false">
    	select * from user 
		where id in(
			select distinct(user_id) from user_role where role_id=#{id}
		)
    </select>
    
    <!-- 查询所有用户 -->
    <select id="selectAllUser" resultType="User">
    	select * from user
    </select>

</mapper>